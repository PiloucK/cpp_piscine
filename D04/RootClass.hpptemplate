
#ifndef INCLUSION_PROTECT
# define INCLUSION_PROTECT

# include <iostream>
# include <string>

class CLASS_NAME {

public:
    CLASS_NAME( const std::string & name );
    CLASS_NAME( const CLASS_NAME & model );

    virtual ~CLASS_NAME( void );

    CLASS_NAME & operator=( const CLASS_NAME & model );

    const std::string & getName( void ) const;

protected:
    std::string m_Name;
    
private:
    CLASS_NAME( void );

};

std::ostream & operator<<( std::ostream & stream, const CLASS_NAME & LOWER_CLASS_NAME );

CLASS_NAME::CLASS_NAME(
    const std::string & name )
        : m_Name(name)
{
}

CLASS_NAME::CLASS_NAME(
    const CLASS_NAME & model )
{
    *this = model;
}

CLASS_NAME::~CLASS_NAME(
    void )
{
}

CLASS_NAME &
CLASS_NAME::operator=(
    const CLASS_NAME & model )
{
    m_Name = model.getName();

    return *this;
}

const std::string &
CLASS_NAME::getName(
    void ) const
{
    return (m_Name);
}

std::ostream &
operator<<(
    std::ostream & oStream
    , const CLASS_NAME & LOWER_CLASS_NAME )
{
    oStream << "\n";

    return (oStream);
}

#endif
